var Slider=function(n){var e,t,o,l,s=-1,a=function(){var n,e,t,o;return{sd_templateInit:function(){n=$("#slider-template").html(),e=Handlebars.compile(n)},sd_templateInsertData:function(n){t={slidesTemp:n},o=e(t)},sd_templateBuild:function(){$("body").append(o)}}}();this.init=function(){a.sd_templateInit()},this.render=function(){a.sd_templateInsertData(n),a.sd_templateBuild(),d._enterWidth(),$(".js-nav span:first-child").addClass("on"),$(".js-content-holder").addClass("animated"),d._eventsCheck(),d._start()};var d=function(){return{_start:function(){clearInterval(o),o=setInterval(function(){d._moveSlide(1)},3e3)},_enterWidth:function(){t=$(".js-content-holder li").length,l=$(".js-content-holder img").width(),$(".js-content-holder").css({width:l*t})},_moveSlide:function(n){$(".on").removeClass("on"),1===n?(s++,s===t&&(s=0),$(".js-content-holder").css({left:-(l*s)}),e=+$(".js-content-holder li").eq(s).data("number"),$(".js-nav span").eq(e).addClass("on")):(s--,s===-1&&(s=t-1),$(".js-content-holder").css({left:-(l*s)}),e=+$(".js-content-holder li").eq(s).data("number"),$(".js-nav span").eq(e).addClass("on"))},_eventsCheck:function(){$(".control-next").on("click",function(){d._moveSlide(1)}),$(".control-prev").on("click",function(){d._moveSlide()}),$(".js-content-holder li").add($(".control-prev")).add($(".control-next")).add($(".js-nav span")).on("mouseenter",function(){clearInterval(o)}),$(".js-content-holder li").add($(".control-prev")).add($(".control-next")).on("mouseleave",function(){d._start()}),$(".js-nav span").on("click",function(){s=$(this).index()-1,clearInterval(o),d._moveSlide(1)})}}}()};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNsaWRlci5qcyJdLCJuYW1lcyI6WyJTbGlkZXIiLCJhcnJheVNsaWRlcyIsImluZGV4IiwidG90YWxTbGlkZXMiLCJhdXRvU2xpZGVyIiwic2xpZGVyV2lkdGgiLCJwb3MiLCJidWlsZFNsaWRlciIsInNvdXJjZVNsaWRlcyIsInRlbXBsYXRlU2xpZGVzIiwiY29udGV4dFNsaWRlcyIsImh0bWxTbGlkZXMiLCJzZF90ZW1wbGF0ZUluaXQiLCIkIiwiaHRtbCIsIkhhbmRsZWJhcnMiLCJjb21waWxlIiwic2RfdGVtcGxhdGVJbnNlcnREYXRhIiwic2xpZGVzVGVtcCIsInNkX3RlbXBsYXRlQnVpbGQiLCJhcHBlbmQiLCJ0aGlzIiwiaW5pdCIsInJlbmRlciIsInNsaWRlckNvbnRyb2wiLCJfZW50ZXJXaWR0aCIsImFkZENsYXNzIiwiX2V2ZW50c0NoZWNrIiwiX3N0YXJ0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiX21vdmVTbGlkZSIsImxlbmd0aCIsIndpZHRoIiwiY3NzIiwiZGlyZWN0aW9uIiwicmVtb3ZlQ2xhc3MiLCJsZWZ0IiwiZXEiLCJkYXRhIiwib24iLCJhZGQiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLFFBQVMsU0FBU0MsR0FDbEIsR0FDSUMsR0FDQUMsRUFDQUMsRUFDQUMsRUFKQUMsR0FBTSxFQUtOQyxFQUFlLFdBQ2YsR0FBSUMsR0FDQUMsRUFDQUMsRUFDQUMsQ0FDSixRQUNJQyxnQkFBaUIsV0FDYkosRUFBZUssRUFBRSxvQkFBb0JDLE9BQ3JDTCxFQUFpQk0sV0FBV0MsUUFBUVIsSUFFeENTLHNCQUF1QixTQUFVaEIsR0FDN0JTLEdBQWlCUSxXQUFZakIsR0FDN0JVLEVBQWFGLEVBQWVDLElBRWhDUyxpQkFBa0IsV0FDZE4sRUFBRSxRQUFRTyxPQUFPVCxPQUk3QlUsTUFBS0MsS0FBTyxXQUNSZixFQUFZSyxtQkFFaEJTLEtBQUtFLE9BQVMsV0FDVmhCLEVBQVlVLHNCQUFzQmhCLEdBQ2xDTSxFQUFZWSxtQkFDWkssRUFBY0MsY0FFZFosRUFBRSw0QkFBNEJhLFNBQVMsTUFDdkNiLEVBQUUsc0JBQXNCYSxTQUFTLFlBQ2pDRixFQUFjRyxlQUNkSCxFQUFjSSxTQUVsQixJQUFJSixHQUFpQixXQUNqQixPQUNJSSxPQUFRLFdBQ0pDLGNBQWN6QixHQUNkQSxFQUFhMEIsWUFBWSxXQUNyQk4sRUFBY08sV0FBVyxJQUMxQixNQUVQTixZQUFhLFdBQ1R0QixFQUFjVSxFQUFFLHlCQUF5Qm1CLE9BQ3pDM0IsRUFBY1EsRUFBRSwwQkFBMEJvQixRQUMxQ3BCLEVBQUUsc0JBQXNCcUIsS0FBS0QsTUFBTzVCLEVBQWNGLEtBRXRENEIsV0FBWSxTQUFTSSxHQUNqQnRCLEVBQUUsT0FBT3VCLFlBQVksTUFDSCxJQUFkRCxHQUNBN0IsSUFDSUEsSUFBUUgsSUFDUkcsRUFBTSxHQUVWTyxFQUFFLHNCQUFzQnFCLEtBQUtHLE9BQVFoQyxFQUFZLEtBQ2pESCxHQUFTVyxFQUFFLHlCQUF5QnlCLEdBQUdoQyxHQUFLaUMsS0FBSyxVQUNqRDFCLEVBQUUsZ0JBQWdCeUIsR0FBR3BDLEdBQU93QixTQUFTLFFBR3JDcEIsSUFDSUEsS0FBUSxJQUNSQSxFQUFNSCxFQUFjLEdBRXhCVSxFQUFFLHNCQUFzQnFCLEtBQUtHLE9BQVFoQyxFQUFZLEtBQ2pESCxHQUFTVyxFQUFFLHlCQUF5QnlCLEdBQUdoQyxHQUFLaUMsS0FBSyxVQUNqRDFCLEVBQUUsZ0JBQWdCeUIsR0FBR3BDLEdBQU93QixTQUFTLFFBRzdDQyxhQUFjLFdBQ1ZkLEVBQUUsaUJBQWlCMkIsR0FBRyxRQUFTLFdBQzNCaEIsRUFBY08sV0FBVyxLQUU3QmxCLEVBQUUsaUJBQWlCMkIsR0FBRyxRQUFTLFdBQzNCaEIsRUFBY08sZUFFbEJsQixFQUFFLHlCQUNHNEIsSUFBSTVCLEVBQUUsa0JBQ040QixJQUFJNUIsRUFBRSxrQkFDTjRCLElBQUk1QixFQUFFLGlCQUFpQjJCLEdBQUcsYUFBYyxXQUN6Q1gsY0FBY3pCLEtBRWxCUyxFQUFFLHlCQUNHNEIsSUFBSTVCLEVBQUUsa0JBQ040QixJQUFJNUIsRUFBRSxrQkFBa0IyQixHQUFHLGFBQWMsV0FDdENoQixFQUFjSSxXQUV0QmYsRUFBRSxnQkFBZ0IyQixHQUFHLFFBQVMsV0FDMUJsQyxFQUFNTyxFQUFFUSxNQUFNbkIsUUFBVSxFQUN4QjJCLGNBQWN6QixHQUNkb0IsRUFBY08sV0FBVyIsImZpbGUiOiJzbGlkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU2xpZGVyID0gZnVuY3Rpb24oYXJyYXlTbGlkZXMpIHtcbiAgICB2YXIgcG9zID0gLTEsXG4gICAgICAgIGluZGV4LFxuICAgICAgICB0b3RhbFNsaWRlcyxcbiAgICAgICAgYXV0b1NsaWRlcixcbiAgICAgICAgc2xpZGVyV2lkdGg7XG4gICAgdmFyIGJ1aWxkU2xpZGVyID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc291cmNlU2xpZGVzLFxuICAgICAgICAgICAgdGVtcGxhdGVTbGlkZXMsXG4gICAgICAgICAgICBjb250ZXh0U2xpZGVzLFxuICAgICAgICAgICAgaHRtbFNsaWRlcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNkX3RlbXBsYXRlSW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc291cmNlU2xpZGVzID0gJChcIiNzbGlkZXItdGVtcGxhdGVcIikuaHRtbCgpO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlU2xpZGVzID0gSGFuZGxlYmFycy5jb21waWxlKHNvdXJjZVNsaWRlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2RfdGVtcGxhdGVJbnNlcnREYXRhOiBmdW5jdGlvbiAoYXJyYXlTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0U2xpZGVzID0ge3NsaWRlc1RlbXA6IGFycmF5U2xpZGVzfTtcbiAgICAgICAgICAgICAgICBodG1sU2xpZGVzID0gdGVtcGxhdGVTbGlkZXMoY29udGV4dFNsaWRlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2RfdGVtcGxhdGVCdWlsZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChodG1sU2xpZGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KCkpOyAvL9C80L7QtNGD0LvRjFxuICAgIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBidWlsZFNsaWRlci5zZF90ZW1wbGF0ZUluaXQoKTtcbiAgICB9O1xuICAgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGJ1aWxkU2xpZGVyLnNkX3RlbXBsYXRlSW5zZXJ0RGF0YShhcnJheVNsaWRlcyk7XG4gICAgICAgIGJ1aWxkU2xpZGVyLnNkX3RlbXBsYXRlQnVpbGQoKTtcbiAgICAgICAgc2xpZGVyQ29udHJvbC5fZW50ZXJXaWR0aCgpO1xuXG4gICAgICAgICQoJy5qcy1uYXYgc3BhbjpmaXJzdC1jaGlsZCcpLmFkZENsYXNzKCdvbicpO1xuICAgICAgICAkKCcuanMtY29udGVudC1ob2xkZXInKS5hZGRDbGFzcygnYW5pbWF0ZWQnKTtcbiAgICAgICAgc2xpZGVyQ29udHJvbC5fZXZlbnRzQ2hlY2soKTtcbiAgICAgICAgc2xpZGVyQ29udHJvbC5fc3RhcnQoKTtcbiAgICB9O1xuICAgIHZhciBzbGlkZXJDb250cm9sID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX3N0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9TbGlkZXIpO1xuICAgICAgICAgICAgICAgIGF1dG9TbGlkZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlckNvbnRyb2wuX21vdmVTbGlkZSgxKTtcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZW50ZXJXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdG90YWxTbGlkZXMgPSAkKCcuanMtY29udGVudC1ob2xkZXIgbGknKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgc2xpZGVyV2lkdGggPSAkKCcuanMtY29udGVudC1ob2xkZXIgaW1nJykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICAkKCcuanMtY29udGVudC1ob2xkZXInKS5jc3Moe3dpZHRoOiBzbGlkZXJXaWR0aCAqIHRvdGFsU2xpZGVzfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX21vdmVTbGlkZTogZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgJCgnLm9uJykucmVtb3ZlQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gdG90YWxTbGlkZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJCgnLmpzLWNvbnRlbnQtaG9sZGVyJykuY3NzKHtsZWZ0OiAtKHNsaWRlcldpZHRoKihwb3MpKX0pO1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9ICskKCcuanMtY29udGVudC1ob2xkZXIgbGknKS5lcShwb3MpLmRhdGEoJ251bWJlcicpO1xuICAgICAgICAgICAgICAgICAgICAkKCcuanMtbmF2IHNwYW4nKS5lcShpbmRleCkuYWRkQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwb3MtLTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gdG90YWxTbGlkZXMgLSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICQoJy5qcy1jb250ZW50LWhvbGRlcicpLmNzcyh7bGVmdDogLShzbGlkZXJXaWR0aCoocG9zKSl9KTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSArJCgnLmpzLWNvbnRlbnQtaG9sZGVyIGxpJykuZXEocG9zKS5kYXRhKCdudW1iZXInKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmpzLW5hdiBzcGFuJykuZXEoaW5kZXgpLmFkZENsYXNzKCdvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZXZlbnRzQ2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJy5jb250cm9sLW5leHQnKS5vbignY2xpY2snLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlckNvbnRyb2wuX21vdmVTbGlkZSgxKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgJCgnLmNvbnRyb2wtcHJldicpLm9uKCdjbGljaycsIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVyQ29udHJvbC5fbW92ZVNsaWRlKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICQoJy5qcy1jb250ZW50LWhvbGRlciBsaScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoJCgnLmNvbnRyb2wtcHJldicpKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCQoJy5jb250cm9sLW5leHQnKSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgkKCcuanMtbmF2IHNwYW4nKSkub24oJ21vdXNlZW50ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhdXRvU2xpZGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkKCcuanMtY29udGVudC1ob2xkZXIgbGknKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCQoJy5jb250cm9sLXByZXYnKSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgkKCcuY29udHJvbC1uZXh0JykpLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXJDb250cm9sLl9zdGFydCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICQoJy5qcy1uYXYgc3BhbicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSAkKHRoaXMpLmluZGV4KCkgLSAxO1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9TbGlkZXIpO1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXJDb250cm9sLl9tb3ZlU2xpZGUoMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSgpKTsgLy/QvNC+0LTRg9C70Yxcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
